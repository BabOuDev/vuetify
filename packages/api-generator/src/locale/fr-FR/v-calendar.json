{
  "props": {
    "categories": "Spécifie les catégories à afficher dans la vue `category`. Cela contrôle également l'ordre des catégories. Si le calendrier utilise des événements, les catégories spécifiées dans ces événements non spécifiées dans cette valeur sont affichées dynamiquement dans la vue, sauf si `category-hide-dynamic` est vrai.",
    "categoryHideDynamic": "Définit si les catégories spécifiées dans un événement doivent être masquées si ce n'est pas défini dans `categories`.",
    "categoryShowAll": "Définit si la vue `category` doit afficher toutes les `categories` définies même s'il n'y a aucun événement pour une catégorie.",
    "categoryForInvalid": "La catégorie à placer des événements dans des catégories non valides. Une catégorie n'est pas valide quand ce n'est pas une chaîne. Par défaut, les événements sans catégorie ne sont pas affichés jusqu'à ce que cette valeur soit spécifiée.",
    "categoryDays": "Le nombre de jours à afficher dans la vue `category`.",
    "categoryText": "Si categories est une liste d'objets, vous pouvez l'utiliser pour déterminer la propriété à afficher comme texte de la catégorie dans le calendrier. Vous pouvez fournir une fonction pour faire une logique ou simplement définir le nom de la prop. Ceci est similaire à item-text sur un v-select",
    "dayFormat": "Formate le jour de la chaîne de caractères du mois qui apparaît dans un jour à une locale spécifiée",
    "end": "La date de fin du calendrier (inclusivement) au format de `YYYY-MM-DD`. Cela peut être ignoré en fonction du `type` du calendrier.",
    "eventCategory": "Définit la propriété de la catégorie de *événement*. Au lieu d'une propriété, une fonction peut être donnée qui prend un événement et renvoie la catégorie.",
    "eventColor": "Une couleur d'arrière-plan pour tous les événements ou une fonction qui accepte un objet d'événement passé au calendrier pour retourner une couleur.",
    "eventEnd": "Définir la propriété de *event*'s end timestamp.",
    "eventHeight": "La hauteur d'un événement en pixels dans la vue `mois` et en haut des vues `jour`.",
    "eventMarginBottom": "Marge en bas pour l'événement",
    "eventMore": "Si le bouton \"plus\" est affiché sur un calendrier avec trop d'événements dans une journée donnée. Cela dira quelque chose comme \"5\" et lorsque cliqué génère un événement `click:more`.",
    "eventMoreText": "Le texte à afficher dans le bouton \"plus\" étant donné le nombre d'événements cachés.",
    "eventName": "Définissez la propriété du nom affiché de *événement*, ou une fonction qui accepte un objet d'événement passé au calendrier comme premier argument et un drapeau indiquant si le nom est pour un événement chronométré (vrai) ou un événement au cours d'une journée.",
    "eventOverlapMode": "Une des `stack`, `column`, ou une fonction de rendu personnalisée",
    "eventOverlapThreshold": "Une valeur en minutes permet de déterminer si deux événements en temps opportun doivent être placés dans la colonne à côté de l'autre ou doivent être traités comme un événement légèrement chevauchant.",
    "eventRipple": "Applique la directive `v-ripple`.",
    "events": "Un tableau d'objets d'événements avec une propriété pour un timestamp de début et éventuellement un nom et un timestamp de fin. Si un timestamp de fin n'est pas donné, la valeur de début sera utilisée. Si aucun nom n'est donné, vous devez fournir une implémentation pour l'emplacement `event`.",
    "eventStart": "Définir la propriété de *event*'s start timestamp.",
    "eventTextColor": "Une couleur de texte pour tous les événements ou une fonction qui accepte un objet d'événement passé au calendrier pour retourner une couleur.",
    "eventTimed": "If Dates or milliseconds are used as the start or end timestamp of an event, this prop can be a string to a property on the event that is truthy if the event is a timed event or a function which takes the event and returns a truthy value if the event is a timed event.",
    "firstInterval": "Le premier intervalle à afficher dans la vue `day`. Si `intervalMinutes` est fixé à 60 et ceci est fixé à 9 la première fois dans la vue est de 9h.",
    "firstTime": "La première fois à afficher dans la vue `day`. Si spécifié, cela remplace toute valeur `firstInterval` spécifiée. Cela peut être le nombre de minutes depuis minuit, une chaîne de caractères au format `HH:mm`, ou un objet avec le nombre de propriétés heure et minute.",
    "hideHeader": "Si l'en-tête en haut de la vue `day` doit être visible.",
    "intervalCount": "Le nombre d'intervalles à afficher dans la vue `day`.",
    "intervalFormat": "Formate l'heure de la chaîne de caractères qui apparaît dans l'intervalle de la vue `day` et `week` à la locale spécifiée",
    "intervalHeight": "La hauteur d'un intervalle en pixels dans la vue `day`.",
    "intervalWidth": "La largeur de la gouttière d'intervalle sur le côté gauche dans la vue `jour`.",
    "intervalMinutes": "Le nombre de minutes que les intervalles sont dans la vue `day`. Un intervalle commun est de 60 minutes pour que les intervalles soient une heure.",
    "intervalStyle": "Retourne le style CSS à appliquer à l'intervalle.",
    "locale": "La locale du calendrier.",
    "localeFirstDayOfYear": "Définit le jour qui détermine la première semaine de l'année, à partir de 0 pour **Dimanche**. Pour ISO 8601, ce devrait être 4.",
    "maxDays": "Le nombre maximum de jours à afficher dans le calendrier personnalisé si une journée `end` n'est pas définie.",
    "minWeeks": "Le nombre minimum de semaines à afficher dans la vue `month` ou `week`.",
    "monthFormat": "Formate la chaîne de mois qui apparaît dans un jour à une locale spécifiée",
    "now": "Remplacer le jour et l'heure qui est considéré maintenant. Ceci est au format de `YYYY-MM-DD hh:mm:ss`. Le calendrier est stylisé selon maintenant.",
    "shortIntervals": "Si vrai, les intervalles dans la vue `day` seront de 9 heures par rapport à 09:00 AM",
    "shortMonths": "Si les versions courtes d'un mois doivent être utilisées (Jan vs Janvier).",
    "shortWeekdays": "Si les versions courtes d'une semaine doivent être utilisées (lun contre lundi).",
    "showIntervalLabel": "Vérifie si un jour et une heure donnés doivent être affichés dans l'intervalle de la vue `day`.",
    "showMonthOnFirst": "Si le nom du mois doit être affiché le premier jour du mois.",
    "showWeek": "Si les numéros de semaine doivent être affichés lors de l'utilisation de la vue `month`.",
    "start": "La date de début du calendrier (inclusivement) au format de `YYYY-MM-DD`. Cela peut être ignoré en fonction du `type` du calendrier.",
    "type": "A string which is one of `month`, `week`, `day`, `4day`, `custom-weekly`, `custom-daily`, and `category`. The custom types look at the `start` and `end` dates passed to the component as opposed to the `value`.",
    "v-model": "Définit la propriété `value`, mais la met à jour aussi lorsque le lien d'une journée est cliqué.",
    "value": "Une date au format de `YYYY-MM-DD` qui détermine quelle durée pour le calendrier.",
    "weekdayFormat": "Formate le jour de la chaîne de semaine qui apparaît dans l'en-tête à la locale spécifiée",
    "weekdays": "Spécifie quels jours de la semaine à afficher. Pour afficher le lundi au vendredi seulement, une valeur de `[1, 2, 3, 4, 5]` peut être utilisée. Pour afficher une semaine à partir du lundi une valeur de `[1, 2, 3, 4, 5, 6, 0]` peut être utilisée."
  },
  "slots": {
    "category": "The content placed in a category header for the `category` type. The category variable is null for events with invalid (non-string) categories.",
    "day-body": "Le contenu placé dans une vue `day` dans le conteneur d'intervalle défilé. L'objet jour et heure est passé à travers cette portée.",
    "day-header": "Le contenu placé dans une vue `day` dans le conteneur en haut. L'objet jour et heure est passé à travers cette portée.",
    "day-label": "The content that is placed in the day of the month space in the `custom-weekly` or `month` view. The day & time object is passed through this slots scope.",
    "day-label-header": "The content that is placed in the day of the month space in the `week`, `day`, `4day`, or `custom-daily` view. The day & time object is passed through this slots scope.",
    "day-month": "Le contenu placé dans l'espace du mois dans la vue `week` ou `month`. L'objet jour et heure est passé à travers cette portée.",
    "day": "Le contenu placé dans une vue `week` ou `month`. L'objet jour et heure est passé à travers cette portée.",
    "event": "The content placed in an event. This ignores the `event-name` prop.",
    "interval": "Le contenu placé dans l'espace d'intervalle dans la vue `day`. L'objet jour et heure est passé à travers cette portée.",
    "interval-header": "The content that is placed in the interval space in the top left of the `day` view."
  },
  "events": {
    "change": "La plage de jours affichée sur le calendrier a changé. Ceci est déclenché lors de l'initialisation. L'événement passé est un objet avec des objets de date de début et de fin.",
    "click:date": "The click event on the day of the month link. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "click:day": "The click event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "click:day-category": "The click event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "click:event": "L'événement clique sur un événement spécifique. L'événement passé est l'objet jour et heure.",
    "click:interval": "The click event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "click:more": "The click event on the `X more` button on views with too many events in a day. Native mouse event is passed as a second argument.",
    "click:time": "The click event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "click:time-category": "The click event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "contextmenu:date": "The right-click event on the day of the month link. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "contextmenu:day": "The right-click event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "contextmenu:day-category": "The right-click event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "contextmenu:event": "L'événement clique droit sur un événement. L'événement est passé l'objet jour et heure.",
    "contextmenu:interval": "The right-click event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "contextmenu:time": "The right-click event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "contextmenu:time-category": "The right-click event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "input": "Un alias à l'événement `click:date` utilisé pour supporter v-model.",
    "mousedown:day": "The mousedown event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mousedown:day-category": "The mousedown event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mousedown:event": "L'événement de la mousson sur un événement. L'événement est passé est l'objet de jour et d'heure.",
    "mousedown:interval": "The mousedown event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mousedown:time": "The mousedown event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mousedown:time-category": "The mousedown event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseenter:day": "The mouseenter event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mouseenter:day-category": "The mouseenter event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mouseenter:event": "L'événement mouseenter lors d'un événement. L'événement est passé l'objet jour et heure.",
    "mouseenter:interval": "The mouseenter event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseenter:time": "The mouseenter event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseenter:time-category": "The mouseenter event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseleave:day": "The mouseleave event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mouseleave:day-category": "The mouseleave event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mouseleave:event": "L'événement mouseleave lors d'un événement. L'événement est passé l'objet jour et heure.",
    "mouseleave:interval": "The mouseleave event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseleave:time": "The mouseleave event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseleave:time-category": "The mouseleave event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mousemove:day": "The mousemove event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mousemove:day-category": "The mousemove event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mousemove:event": "L'événement mousemove sur un événement. L'événement est passé l'objet jour et heure.",
    "mousemove:interval": "The mousemove event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mousemove:time": "The mousemove event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mousemove:time-category": "The mousemove event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseup:day": "The mouseup event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mouseup:day-category": "The mouseup event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "mouseup:event": "L'événement mouseup lors d'un événement. L'événement est passé l'objet jour et heure.",
    "mouseup:interval": "The mouseup event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseup:time": "The mouseup event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "mouseup:time-category": "The mouseup event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "moved": "Une des fonctions `next`, `prev`, et `move` a été appelée. L'événement passé est l'objet jour calculé pour le mouvement.",
    "touchend:day": "The touchend event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "touchend:day-category": "The touchend event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "touchend:event": "L'événement touché est visible. L'événement passé est l'objet jour et heure.",
    "touchend:interval": "The touchend event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchend:time": "The touchend event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchend:time-category": "The touchend event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchmove:day": "The touchmove event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "touchmove:day-category": "The touchmove event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "touchmove:event": "L'événement touchmove sur une vue `event`. L'événement passé est l'objet jour et heure.",
    "touchmove:interval": "The touchmove event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchmove:time": "The touchmove event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchmove:time-category": "The touchmove event at a specific time in the `category` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchstart:day": "The touchstart event on a day. The event passed is the day object. Native mouse event is passed as a second argument.",
    "touchstart:day-category": "The touchstart event on a day in the `category` view. The event passed is the day object. Native mouse event is passed as a second argument.",
    "touchstart:event": "L'événement touchstart sur une vue d'événement. L'événement est passé l'objet jour et heure.",
    "touchstart:interval": "The touchstart event at a specific interval label in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchstart:time": "The touchstart event at a specific time in the `day` view. The event passed is the day & time object. Native mouse event is passed as a second argument.",
    "touchstart:time-category": "The touchstart event at a specific time in the `category` view. The event passed is the day & time object Native mouse event is passed as a second argument.."
  },
  "functions": {
    "checkChange": "Vérifie le changement des dates de début et de fin. Mise à jour et émet un événement de changement s'ils ont changé.",
    "formatTime": "Une fonction utilitaire pour prendre un objet timestamp (au moins a des propriétés heure et minute) et génère un temps comme une chaîne de caractères.",
    "getFormatter": "Une fonction utilitaire donnée les options pour passer à Intl.DateTimeFormat et retourne une fonction qui peut être donnée une date à formater comme chaîne de caractères.",
    "minutesToPixels": "Convertit des minutes en une valeur de pixel sur l'axe y pour la vue `day`. Si la vue n'est pas `day` alors -1 est retournée.",
    "move": "Une fonction générique qui déplace le calendrier suivant (si le montant est positif) ou précédent (si le montant est négatif).",
    "next": "Déclenche l'événement d'entrée avec une date qui ferait progresser le calendrier dans le prochain timespan. Si le type est `month` il retournera un jour dans le mois suivant, si le type est `4day` il retournera une date 4 jours après `value`/`v-model`, etc.",
    "prev": "Déclenche l'événement d'entrée avec une date qui ferait progresser le calendrier dans l'horloge précédente. Si le type est `month` il retournera un jour dans le mois précédent, si le type est `4day` il retournera une date 4 jours avant `value`/`v-model`, etc.",
    "scrollToTime": "Défile la zone défilée dans la vue `day` à l'heure donnée. Si l'heure n'est pas dans un format valide ou si le calendrier n'est pas dans la vue `day` alors false est retourné.",
    "timeToY": "Convertit un temps en une valeur de pixel sur l'axe y pour la vue `day`. Si l'heure n'est pas dans un format valide ou si le calendrier n'est pas dans la vue `day` alors false est retourné.",
    "timeDelta": "Converts a time to a delta value for the `day` view. If the time is not in a valid format or if the calendar is not in the `day` view then false is returned. A delta value is typically between 0 and 1. If the time given is before the first interval then a negative number will be returned. If the time given is after the last interval than a number greater than 1 will be returned.",
    "updateEventVisibility": "Si le calendrier a des événements et `event-more` est véridique les jours avec trop d'événements contiennent un 'bouton' pour représenter combien d'événements ont dû être cachés.",
    "updateTimes": "Mises à jour maintenant et aujourd'hui dans le calendrier, peut-être mettre à jour les styles dans le calendrier.",
    "getVisibleEvents": "Returns the list of events seen on the current calendar where each element returned has the following properties:<br>- `input`: the event passed in the `events` prop.<br>- `start`: a CalendarTimestamp of the start timestamp parsed.<br>- `startIdentifier`: a number which represents the day the event starts on.<br>- `startTimestampIdentifier`: a number which represents the day and time the event starts on.<br>- `end`: a CalendarTimestamp of the end timestamp parsed.<br>- `endIdentifier`: a number which represents the day the event ends on.<br>- `endTimestampIdentifier`: a number which represents the day & time the event ends on.<br>- `allDay`: if this is an all-day event (has no time specified in the `start`/`end` on the event).<br>- `index`: the index of the event in the given array.<br>- `category`: the category of the event if the calendar type is category, otherwise false.",
    "parseTimestamp": "A utility function which takes timestamp input and returns a timestamp object.",
    "timestampToDate": "A utility function which takes timestamp and returns a Date.",
    "parseEvent": "A utility function which takes an event and returns the parsed version of that event."
  }
}
