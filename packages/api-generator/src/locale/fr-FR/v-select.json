{
  "props": {
    "attach": "Spécifie à quel élément DOM doit être détaché ce composant. La chaîne de caractères peut être n'importe quel querySelector valide et Object peut être n'importe quel nœud valide. Cela sera attaché par défaut au composant racine `v-app`.",
    "autocomplete": "Filter the items in the list based on user input",
    "cacheItems": "Keeps a local _unique_ copy of all items that have been passed through the **items** prop.",
    "chips": "Changes display of selections to chips",
    "combobox": "The single select variant of **tags**",
    "dark": "Applique la variante du thème foncé au composant. Cela va par défaut la couleur des composants à _white_ à moins que vous ayez configuré votre [thème d'application](/customization/thème) à **dark** ou si vous utilisez le prop **couleur** sur le composant. Vous pouvez trouver plus d'informations sur la documentation de Design de matériaux pour [thèmes foncés](https://material.io/design/color/dark-theme.html).",
    "debounceSearch": "Debounces the search input value being emitted",
    "deletableChips": "Adds a remove icon to selected chips",
    "disabled": "Désactive le champ",
    "disableLookup": "Disables keyboard lookup",
    "eager": "Force le contenu des composants à effectuer le rendu sur les composants montés. Ceci est utile si vous avez du contenu qui ne sera pas rendu dans le DOM que vous voulez explorer pour le référencement.",
    "editable": " Creates an editable button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "filter": "La fonction utilisée pour filtrer les éléments",
    "hideSelected": "Do not display in the select menu items that are already selected. Also removes checkboxes from the list when multiple",
    "itemColor": "Définit la couleur des éléments sélectionnés",
    "itemDisabled": "Set property of **items**'s disabled value",
    "items": "Can be an array of objects or array of strings. When using objects, will look for a text, value and disabled keys. This can be changed using the **item-text**, **item-value** and **item-disabled** props.  Objects that have a **header** or **divider** property are considered special cases and generate a list header or divider; these items are not selectable.",
    "itemText": "Set property of **items**'s text value",
    "itemValue": "Set property of **items**'s value - **must be primitive**. Dot notation is supported. **Note:** This is currently not supported with `v-combobox` [GitHub Issue](https://github.com/vuetifyjs/vuetify/issues/5479)",
    "menuProps": "Pass props through to the `v-menu` component. Accepts either a string for boolean props `menu-props=\"auto, overflowY\"`, or an object `:menu-props=\"{ auto: true, overflowY: true }\"`",
    "minWidth": "Définit la largeur minimale du contenu de `v-menu`",
    "multiple": "Changes select to multiple. Accepts array for value",
    "multiLine": "Causes label to float when the select component is focused or dirty",
    "noDataText": "Texte affiché lorsqu'il n'y a pas de données",
    "openOnClear": "When using the **clearable** prop, once cleared, the select menu will either open or stay open, depending on the current state",
    "overflow": "Creates an overflow button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "returnObject": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**",
    "searchInput": "Use the **.sync** modifier to catch user input from the search input",
    "segmented": "Creates a segmented button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "smallChips": "Changes display of selections to chips with the **small** property",
    "tags": "Tagging functionality, allows the user to create new values not available from the **items** prop",
    "valueComparator": "The comparison algorithm used for values. [More info](https://github.com/vuetifyjs/vuetify/blob/v2-stable/packages/vuetify/src/util/helpers.ts)"
  },
  "slots": {
    "append-item": "Adds an item after menu content",
    "item": "Définir l'apparence d'un élément personnalisé",
    "prepend-item": "Adds an item before menu content",
    "selection": "Définir l'apparence d'une sélection personnalisée"
  },
  "events": {
    "update:list-index": "Emitted when menu item is selected using keyboard arrows",
    "update:search-input": "L'événement `search-input.sync`"
  }
}
